{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world","date":"2022-07-10T01:17:15.167Z","updated":"2022-07-10T14:57:32.137Z","comments":true,"path":"2022/07/09/hello-world/","link":"","permalink":"http://example.com/2022/07/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Dijkstra's Algorithm","slug":"dijkstra-algorithm","date":"2019-07-15T14:51:58.000Z","updated":"2022-07-10T14:57:32.137Z","comments":true,"path":"2019/07/15/dijkstra-algorithm/","link":"","permalink":"http://example.com/2019/07/15/dijkstra-algorithm/","excerpt":"","text":"Queue and PriorityQueue Implementation of Dijkstra’s AlgorithmGiven a weighted graph, starting from a source node, return the shortest path to other nodes.The drawback is that we can apply it to graphs which contain negative weighted edges. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import java.util.*;class DijkstraAlgorithm &#123; static int[] shortestPath(Map&lt;Integer, List&lt;int[]&gt;&gt; graph, int srcNode) &#123; int[] dist = new int[graph.size()]; Arrays.fill(dist, Integer.MAX_VALUE); Deque&lt;int[]&gt; dq = new ArrayDeque&lt;&gt;(); dq.addLast(new int[]&#123;srcNode, 0&#125;); while (!dq.isEmpty()) &#123; int currNode = dq.peekFirst()[0]; int currDist = dq.peekFirst()[1]; dq.removeFirst(); if (currDist &lt; dist[currNode]) &#123; dist[currNode] = currDist; for (int[] adj : graph.get(currNode)) &#123; dq.addLast(new int[]&#123;adj[0], currDist + adj[1]&#125;); &#125; &#125; &#125; return dist; &#125; static int[] shortestPathPQ(Map&lt;Integer, List&lt;int[]&gt;&gt; graph, int srcNode) &#123; PriorityQueue&lt;int[]&gt; pq = new PriorityQueue&lt;&gt;((a, b) -&gt; a[1] - b[1]); int[] dist = new int[graph.size()]; Arrays.fill(dist, Integer.MAX_VALUE); pq.add(new int[]&#123;srcNode, 0&#125;); while (!pq.isEmpty()) &#123; int currNode = pq.peek()[0]; int currDist = pq.peek()[1]; pq.remove(); if (dist[currNode] == Integer.MAX_VALUE) &#123; dist[currNode] = currDist; for (int[] adj : graph.get(currNode)) &#123; pq.add(new int[]&#123;adj[0], currDist + adj[1]&#125;); &#125; &#125; &#125; return dist; &#125; public static void main(String[] args) &#123; Map&lt;Integer, List&lt;int[]&gt;&gt; graph = new HashMap&lt;&gt;(); List&lt;int[]&gt; tmp = new ArrayList&lt;&gt;(); tmp.add(new int[]&#123;1, 4&#125;); // B, 4 tmp.add(new int[]&#123;2, 2&#125;); // C, 2 graph.put(0, tmp); // add A&#x27;s adj tmp = new ArrayList&lt;&gt;(); tmp.add(new int[]&#123;2, 3&#125;); // C, 3 tmp.add(new int[]&#123;3, 2&#125;); // D, 2 tmp.add(new int[]&#123;4, 3&#125;); // E, 3 graph.put(1, tmp); // add B&#x27;s adj tmp = new ArrayList&lt;&gt;(); tmp.add(new int[]&#123;1, 1&#125;); // B, 1 tmp.add(new int[]&#123;3, 4&#125;); // D, 4 tmp.add(new int[]&#123;4, 5&#125;); // E, 5 graph.put(2, tmp); // add C&#x27;s adj tmp = new ArrayList&lt;&gt;(); graph.put(3, tmp); // add D&#x27;s adj tmp = new ArrayList&lt;&gt;(); tmp.add(new int[]&#123;3, 1&#125;); // D, 1 graph.put(4, tmp); // add E&#x27;s adj System.out.println(Arrays.toString(shortestPath(graph, 0))); System.out.println(Arrays.toString(shortestPathPQ(graph, 0))); &#125;&#125;","categories":[{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/categories/datastructure/"},{"name":"graph","slug":"datastructure/graph","permalink":"http://example.com/categories/datastructure/graph/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/tags/datastructure/"},{"name":"fundamental","slug":"fundamental","permalink":"http://example.com/tags/fundamental/"},{"name":"graph","slug":"graph","permalink":"http://example.com/tags/graph/"}]},{"title":"Union / Find","slug":"union-find","date":"2019-06-23T21:27:16.000Z","updated":"2022-07-10T14:57:32.137Z","comments":true,"path":"2019/06/23/union-find/","link":"","permalink":"http://example.com/2019/06/23/union-find/","excerpt":"","text":"An Union &#x2F; Find Implementation and An Application ExampleThis article is partialy quoted from Huahua’s blog.Typical LeetCode problems: 547, 684, 737 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108class UnionFindSet &#123; private int[] parents_; private int[] ranks_; public UnionFindSet(int n) &#123; parents_ = new int[n + 1]; ranks_ = new int[n + 1]; for (int i = 0; i &lt; ranks_.length; i++) &#123; parents_[i] = i; ranks_[i] = 1; &#125; &#125; public boolean union(int u, int v) &#123; int pu = find(u); int pv = find(v); if (pv == pu) return false; if (ranks_[pu] &gt; ranks_[pv]) &#123; parents_[pv] = pu; &#125; else if (ranks_[pu] &lt; ranks_[pv]) &#123; parents_[pu] = pv; &#125; else &#123; parents_[pu] = pv; ranks_[pv]++; &#125; return true; &#125; public int find(int u) &#123; if (parents_[u] != u) &#123; parents_[u] = find(parents_[u]); &#125; return parents_[u]; &#125; public static void main(String[] args) &#123; UnionFindSet uf = new UnionFindSet(8); uf.union(3, 1); uf.union(8, 5); uf.union(5, 3); uf.union(7, 5); uf.union(4, 2); uf.union(1, 2); &#125;&#125;// LeetCode 547. Friend Circlesclass Solution &#123; static class UnionFindSet &#123; private int[] parents_; private int[] ranks_; public UnionFindSet(int n) &#123; parents_ = new int[n + 1]; ranks_ = new int[n + 1]; for (int i = 0; i &lt; ranks_.length; i++) &#123; parents_[i] = i; ranks_[i] = 1; &#125; &#125; public boolean union(int u, int v) &#123; int pu = find(u); int pv = find(v); if (pv == pu) return false; if (ranks_[pu] &gt; ranks_[pv]) &#123; parents_[pv] = pu; &#125; else if (ranks_[pu] &lt; ranks_[pv]) &#123; parents_[pu] = pv; &#125; else &#123; parents_[pu] = pv; ranks_[pv]++; &#125; return true; &#125; public int find(int u) &#123; if (parents_[u] != u) &#123; parents_[u] = find(parents_[u]); &#125; return parents_[u]; &#125; public static void main(String[] args) &#123; UnionFindSet uf = new UnionFindSet(8); uf.union(3, 1); uf.union(8, 5); uf.union(5, 3); uf.union(7, 5); uf.union(4, 2); uf.union(1, 2); &#125; &#125; // What we do here is to find how many clusters do we have. public int findCircleNum(int[][] M) &#123; Set&lt;Integer&gt; clusters = new HashSet&lt;&gt;(); UnionFindSet uf = new UnionFindSet(M.length); for (int i = 0; i &lt; M.length; i++) &#123; for (int j = i + 1; j &lt; M.length; j++) &#123; if (M[i][j] == 1) &#123; uf.union(i, j); &#125; &#125; &#125; for (int i = 0; i &lt; M.length; i++) &#123; clusters.add(uf.find(i)); &#125; return clusters.size(); &#125;&#125;","categories":[{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/categories/datastructure/"},{"name":"graph","slug":"datastructure/graph","permalink":"http://example.com/categories/datastructure/graph/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/tags/datastructure/"},{"name":"fundamental","slug":"fundamental","permalink":"http://example.com/tags/fundamental/"},{"name":"graph","slug":"graph","permalink":"http://example.com/tags/graph/"}]},{"title":"Topological Ordering Iterative / DFS","slug":"graph-implementation","date":"2019-06-03T13:05:06.000Z","updated":"2022-07-10T14:57:32.137Z","comments":true,"path":"2019/06/03/graph-implementation/","link":"","permalink":"http://example.com/2019/06/03/graph-implementation/","excerpt":"","text":"Topological Ordering Iterative &#x2F; DFS123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162import java.util.*;public class Graph &#123; static class Node &#123; String name; Node(String name) &#123; this.name = name; &#125; &#125; private Map&lt;String, Node&gt; nodes; private Map&lt;String, List&lt;String&gt;&gt; edges; private Graph() &#123; this.nodes = new HashMap&lt;&gt;(); this.edges = new HashMap&lt;&gt;(); &#125; public void addNode(String name, Node node) &#123; this.nodes.put(name, node); &#125; public Map&lt;String, Node&gt; getNodes() &#123; return this.nodes; &#125; public void addEdge(String fromNode, String toNode) &#123; List&lt;String&gt; toNodes = this.edges.getOrDefault(fromNode, new ArrayList&lt;&gt;()); toNodes.add(toNode); this.edges.put(fromNode, toNodes); &#125; public Map&lt;String, List&lt;String&gt;&gt; getEdges() &#123; return this.edges; &#125; private List&lt;String&gt; topologicalOrdering() &#123; Map&lt;String, Integer&gt; inDegree = new HashMap&lt;&gt;(); for (String fromNode : this.edges.keySet()) &#123; for (String toNode : this.edges.get(fromNode)) &#123; inDegree.put(toNode, inDegree.getOrDefault(toNode, 0) + 1); &#125; &#125; for (String node : this.nodes.keySet()) &#123; if (!inDegree.containsKey(node)) &#123; inDegree.put(node, 0); &#125; &#125; Queue&lt;String&gt; q = new LinkedList&lt;&gt;(); Set&lt;String&gt; visited = new HashSet&lt;&gt;(); for (String key : inDegree.keySet()) &#123; if (inDegree.get(key) == 0) &#123; visited.add(key); q.add(key); &#125; &#125; List&lt;String&gt; ans = new ArrayList&lt;&gt;(); while (!q.isEmpty()) &#123; String name = q.remove(); ans.add(name); visited.add(name); for (String toNode : this.getEdges().getOrDefault(name, new ArrayList&lt;&gt;())) &#123; if (visited.contains(toNode)) continue; inDegree.put(toNode, inDegree.get(toNode) - 1); if (inDegree.get(toNode) == 0) &#123; q.add(toNode); visited.add(toNode); &#125; &#125; &#125; if (ans.size() != this.nodes.keySet().size()) System.out.println(&quot;This is not a DAG.&quot;); return ans; &#125; // FROM WIKI // L ← Empty list that will contain the sorted nodes // while exists nodes without a permanent mark do // select an unmarked node n // visit(n) // function visit(node n) // if n has a permanent mark then return // if n has a temporary mark then stop (not a DAG) // mark n with a temporary mark // for each node m with an edge from n to m do // visit(m) // remove temporary mark from n // mark n with a permanent mark // add n to head of L public List&lt;String&gt; topologicalOrderingDFS() &#123; Map&lt;String, String&gt; visited = new HashMap&lt;&gt;(); Stack&lt;String&gt; stack = new Stack&lt;&gt;(); for (String node : this.nodes.keySet()) &#123; if (visited.containsKey(node)) continue; if (!dfs(node, visited, stack)) &#123; System.out.println(&quot;This is not a DAG.&quot;); return null; &#125; &#125; List&lt;String&gt; ans = new ArrayList&lt;&gt;(); while (!stack.isEmpty()) &#123; ans.add(stack.pop()); &#125; return ans; &#125; boolean dfs(String node, Map&lt;String, String&gt; visited, Stack&lt;String&gt; stack) &#123; if (visited.getOrDefault(node, &quot;&quot;).equals(&quot;perm&quot;)) return true; if (visited.getOrDefault(node, &quot;&quot;).equals(&quot;temp&quot;)) return false; visited.put(node, &quot;temp&quot;);// System.out.println(node.inDegree.keySet()); for (String nextNode : this.edges.getOrDefault(node, new ArrayList&lt;&gt;())) &#123; if (!dfs(nextNode, visited, stack)) return false; &#125; visited.put(node, &quot;perm&quot;); stack.push(node); return true; &#125; // a -&gt; b -&gt; c -&gt; d // b -&gt; e -&gt; f -&gt; h // c -&gt; f // a -----------&gt; f // e -&gt; i // g public static void main(String[] args) &#123; Graph g = new Graph(); Node n_a = new Node(&quot;a&quot;); Node n_b = new Node(&quot;b&quot;); g.addNode(n_a.name, n_a); g.addNode(n_b.name, n_b); g.addEdge(n_a.name, n_b.name); Node n_c = new Node(&quot;c&quot;); g.addNode(n_c.name, n_c); g.addEdge(n_b.name, n_c.name); Node n_d = new Node(&quot;d&quot;); g.addNode(n_d.name, n_d); g.addEdge(n_c.name, n_d.name); Node n_e = new Node(&quot;e&quot;); g.addNode(n_e.name, n_e); g.addEdge(n_b.name, n_e.name); Node n_f = new Node(&quot;f&quot;); g.addNode(n_f.name, n_f); g.addEdge(n_e.name, n_f.name); g.addEdge(n_a.name, n_f.name); g.addEdge(n_c.name, n_f.name); Node n_g = new Node(&quot;g&quot;); g.addNode(n_g.name, n_g); Node n_h = new Node(&quot;h&quot;); g.addNode(n_h.name, n_h); g.addEdge(n_f.name, n_h.name); g.addEdge(n_f.name, n_d.name); Node n_i = new Node(&quot;i&quot;); g.addNode(n_i.name, n_i); g.addEdge(n_e.name, n_i.name);// g.addEdge(n_i.name, n_i.name);// g.addEdge(n_i.name, n_e.name); for (String fromNode : g.nodes.keySet()) &#123; System.out.println(fromNode + &quot;:&quot;); for (String toNode : g.getEdges().getOrDefault(fromNode, new ArrayList&lt;&gt;())) &#123; System.out.println(&quot; &quot; + fromNode + &quot; -&gt; &quot; + toNode); &#125; &#125; System.out.println(g.topologicalOrdering()); System.out.println(g.topologicalOrderingDFS()); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# topological sorting in pythonfrom collections import dequeclass Node: def __init__(self, name): self.name = name self.adj = set() def add_adj(self, node): self.adj.add(node)def bfs(node, visited, ans): q = deque() q.append(node) visited.add(node.name) while len(q) != 0: temp = q.popleft() ans.append(temp.name) for nei in temp.adj: if nei.name not in visited: visited.add(nei.name) q.append(nei)node_a = Node(&#x27;a&#x27;)node_b = Node(&#x27;b&#x27;)node_c = Node(&#x27;c&#x27;)node_d = Node(&#x27;d&#x27;)node_e = Node(&#x27;e&#x27;)node_f = Node(&#x27;f&#x27;)node_g = Node(&#x27;g&#x27;)node_a.add_adj(node_b)node_a.add_adj(node_c)node_a.add_adj(node_e)node_b.add_adj(node_c)node_b.add_adj(node_d)node_c.add_adj(node_e)# node_d.add_adj(node_e)# node_e.add_adj(node_c)# node_e.add_adj(node_a)node_f.add_adj(node_b)visited = set()ans = []bfs(node_f, visited, ans)print(ans) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162# dfs topological sortingclass Node: def __init__(self, name): self.name = name self.adj = set() def add_adj(self, node): self.adj.add(node)def dfs(root, visited, ans): if root.name in visited: return visited[root.name] visited[root.name] = False for node in root.adj: if dfs(node, visited, ans) == False: return False visited[root.name] = True ans.append(root.name) return Truedef topo_sort(graph): ans = [] visited = &#123;&#125; for node in graph: if dfs(node, visited, ans) == False: return None return &quot;&quot;.join(ans[::-1])node_a = Node(&#x27;a&#x27;)node_b = Node(&#x27;b&#x27;)node_c = Node(&#x27;c&#x27;)node_d = Node(&#x27;d&#x27;) node_e = Node(&#x27;e&#x27;)node_f = Node(&#x27;f&#x27;)node_g = Node(&#x27;g&#x27;)node_a.add_adj(node_b)node_a.add_adj(node_c)# node_a.add_adj(node_e)node_b.add_adj(node_c)node_b.add_adj(node_d)node_c.add_adj(node_e)# node_d.add_adj(node_e)#node_e.add_adj(node_c)node_e.add_adj(node_a)node_f.add_adj(node_b)graph = [node_a, node_b, node_c, node_d, node_e, node_f, node_g]print(topo_sort(graph))","categories":[{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/categories/datastructure/"},{"name":"graph","slug":"datastructure/graph","permalink":"http://example.com/categories/datastructure/graph/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/tags/datastructure/"},{"name":"fundamental","slug":"fundamental","permalink":"http://example.com/tags/fundamental/"},{"name":"graph","slug":"graph","permalink":"http://example.com/tags/graph/"}]},{"title":"Dynamic Programming Strategy","slug":"dp-strategy","date":"2019-05-02T02:03:43.000Z","updated":"2022-07-10T14:57:32.137Z","comments":true,"path":"2019/05/01/dp-strategy/","link":"","permalink":"http://example.com/2019/05/01/dp-strategy/","excerpt":"","text":"Quote and Summary from “Dynamic Programming for Coding interviews”.Dynamic Programming Properties: Optimal sub-structures; Overlapping sub-problems. Strategy for DP Problems: Write recursive solution Define problem in terms of subproblems in a top-down manner; Solve base case. The subproblems are solved by recursion, what is left is base case; Add a terminating condition. Memorization (Recursion + Cache, Top-Down, Optional) DP (Bottom-Up) DP Problem Characteristics Does it have Dynamic Programming Properties? Are we trying to optimize something, maximizing or minimizing something or counting the total number of possible ways to do something?","categories":[{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/categories/datastructure/"},{"name":"dp","slug":"datastructure/dp","permalink":"http://example.com/categories/datastructure/dp/"}],"tags":[{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/tags/datastructure/"},{"name":"fundamental","slug":"fundamental","permalink":"http://example.com/tags/fundamental/"},{"name":"dp","slug":"dp","permalink":"http://example.com/tags/dp/"}]},{"title":"LeetCode 450. Delete Node in a BST","slug":"bst-del-node","date":"2019-04-29T00:13:45.000Z","updated":"2022-07-10T14:57:32.137Z","comments":true,"path":"2019/04/28/bst-del-node/","link":"","permalink":"http://example.com/2019/04/28/bst-del-node/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142class TreeNode &#123; TreeNode(int val) &#123; this.val = val; &#125; int val; TreeNode left; TreeNode right;&#125;int successor(TreeNode root) &#123; root = root.right; while (root.left != null) root = root.left; return root.val;&#125;int predecessor(TreeNode root) &#123; root = root.left; while (root.right != null) root = root.right; return root.val;&#125;public TreeNode deleteNode(TreeNode root, int key) &#123; if (root == null) return null; if (key &lt; root.val) root.left = deleteNode(root.left, key); else if (key &gt; root.val) root.right = deleteNode(root.right, key); else &#123; // Node is a leaf, and one could delete it straightforward. if (root.left == null &amp;&amp; root.right == null) &#123; root = null; &#125; // Node has right child. Find the successor, set root value with successor&#x27;s value and recursive call from the right child else if (root.right != null) &#123; root.val = successor(root); root.right = deleteNode(root.right, root.val); &#125; // Node has left child. Find the predecessor, set root value with predecessor&#x27;s value and recursive call from the left child else &#123; root.val = predecessor(root); root.left = deleteNode(root.left, root.val); &#125; &#125; return root;&#125;","categories":[{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/categories/datastructure/"},{"name":"tree","slug":"datastructure/tree","permalink":"http://example.com/categories/datastructure/tree/"},{"name":"BST","slug":"datastructure/tree/BST","permalink":"http://example.com/categories/datastructure/tree/BST/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/tags/datastructure/"},{"name":"tree","slug":"tree","permalink":"http://example.com/tags/tree/"},{"name":"BST","slug":"BST","permalink":"http://example.com/tags/BST/"},{"name":"leetcode","slug":"leetcode","permalink":"http://example.com/tags/leetcode/"},{"name":"medium","slug":"medium","permalink":"http://example.com/tags/medium/"}]},{"title":"Searching a Value in BST Iteratively","slug":"bst-find-iterative","date":"2019-04-25T13:15:46.000Z","updated":"2022-07-10T14:57:32.137Z","comments":true,"path":"2019/04/25/bst-find-iterative/","link":"","permalink":"http://example.com/2019/04/25/bst-find-iterative/","excerpt":"","text":"12345678910111213141516171819class TreeNode &#123; public TreeNode(int val) &#123; this.val = val; &#125; int val; TreeNode left; TreeNode right;&#125;public boolean searchBST(TreeNode root, int target) &#123; TreeNode node = root; while (node != null) &#123; if (node.val == target) &#123; return true; &#125; else if (target &lt; node.val) &#123; node = node.left; &#125; else &#123; node = node.right; &#125; &#125; return false;&#125;","categories":[{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/categories/datastructure/"},{"name":"tree","slug":"datastructure/tree","permalink":"http://example.com/categories/datastructure/tree/"},{"name":"BST","slug":"datastructure/tree/BST","permalink":"http://example.com/categories/datastructure/tree/BST/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/tags/datastructure/"},{"name":"tree","slug":"tree","permalink":"http://example.com/tags/tree/"},{"name":"BST","slug":"BST","permalink":"http://example.com/tags/BST/"},{"name":"iterative","slug":"iterative","permalink":"http://example.com/tags/iterative/"},{"name":"fundamental","slug":"fundamental","permalink":"http://example.com/tags/fundamental/"}]},{"title":"Binary Tree Inorder Traversal Iterative","slug":"inorder-traversal-iterative","date":"2019-04-22T13:23:16.000Z","updated":"2022-07-10T14:57:32.137Z","comments":true,"path":"2019/04/22/inorder-traversal-iterative/","link":"","permalink":"http://example.com/2019/04/22/inorder-traversal-iterative/","excerpt":"","text":"Recursive way is trivial but iterative takes some time.Both recursive and iterative have a space complexity of O(log(N)) if the tree is well balanced while the worst case is O(N) when the tree is linear e.g.: 3 / 2 / 1 Both time complexities are O(N) as they go over all the nodes. 123456789101112131415161718192021222324252627282930313233343536373839class TreeNode &#123; public TreeNode(int val) &#123; this.val = val; &#125; int val; TreeNode left; TreeNode right;&#125;public void inorder_iter(TreeNode root) &#123; // 1. if cur node not null then push cur to a stack and make left node cur node // 2. if cur == null, stack pop and visit // 3. cur node = &#123;popped node right&#125; Stack&lt;TreeNode&gt; stk = new Stack&lt;&gt;(); while (true) &#123; // go to the left leaf node while (root != null) &#123; stk.push(root); root = root.left; &#125; if (stk.isEmpty()) &#123; return; &#125; root = stk.pop(); // visit the node System.out.println(root.val); // visit the right sub-tree root = root.right; &#125;&#125;/** 8 / \\ 6 10 / \\ \\ 5 7 12 / 11**/","categories":[{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/categories/datastructure/"},{"name":"tree","slug":"datastructure/tree","permalink":"http://example.com/categories/datastructure/tree/"},{"name":"traversal","slug":"datastructure/tree/traversal","permalink":"http://example.com/categories/datastructure/tree/traversal/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/tags/datastructure/"},{"name":"tree","slug":"tree","permalink":"http://example.com/tags/tree/"},{"name":"iterative","slug":"iterative","permalink":"http://example.com/tags/iterative/"},{"name":"fundamental","slug":"fundamental","permalink":"http://example.com/tags/fundamental/"},{"name":"binary tree","slug":"binary-tree","permalink":"http://example.com/tags/binary-tree/"},{"name":"traversal","slug":"traversal","permalink":"http://example.com/tags/traversal/"},{"name":"stack","slug":"stack","permalink":"http://example.com/tags/stack/"}]},{"title":"Ruby Copy Files Recursively With an Exclusion Set","slug":"ruby-file-system","date":"2019-04-22T00:15:08.000Z","updated":"2022-07-10T14:57:32.137Z","comments":true,"path":"2019/04/21/ruby-file-system/","link":"","permalink":"http://example.com/2019/04/21/ruby-file-system/","excerpt":"","text":"This is a Ruby file system tutorial.1234567891011121314151617require &#x27;find&#x27;# copy all files/dirs in $&#123;source_path&#125; to $&#123;target_path&#125;# e.g. copy_without_files(&#x27;src/dir&#x27;, &#x27;tgt/dir&#x27;, Set.new([&#x27;a.rb&#x27;, &#x27;b.txt&#x27;])) will# copy all files including directories to tgt/dir from src/dirdef copy_without_files(source_path, target_path, skipping_map) Find.find(source_path) do |source| target = source.sub(/^#&#123;source_path&#125;/, target_path) if File.directory? source FileUtils.mkdir target unless File.exists? target else Find.prune if skipping_map.include?(File.basename(source)) FileUtils.copy source, target end endend","categories":[{"name":"ruby","slug":"ruby","permalink":"http://example.com/categories/ruby/"},{"name":"file system","slug":"ruby/file-system","permalink":"http://example.com/categories/ruby/file-system/"}],"tags":[{"name":"ruby","slug":"ruby","permalink":"http://example.com/tags/ruby/"},{"name":"new","slug":"new","permalink":"http://example.com/tags/new/"}]}],"categories":[{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/categories/datastructure/"},{"name":"graph","slug":"datastructure/graph","permalink":"http://example.com/categories/datastructure/graph/"},{"name":"dp","slug":"datastructure/dp","permalink":"http://example.com/categories/datastructure/dp/"},{"name":"tree","slug":"datastructure/tree","permalink":"http://example.com/categories/datastructure/tree/"},{"name":"BST","slug":"datastructure/tree/BST","permalink":"http://example.com/categories/datastructure/tree/BST/"},{"name":"traversal","slug":"datastructure/tree/traversal","permalink":"http://example.com/categories/datastructure/tree/traversal/"},{"name":"ruby","slug":"ruby","permalink":"http://example.com/categories/ruby/"},{"name":"file system","slug":"ruby/file-system","permalink":"http://example.com/categories/ruby/file-system/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"datastructure","slug":"datastructure","permalink":"http://example.com/tags/datastructure/"},{"name":"fundamental","slug":"fundamental","permalink":"http://example.com/tags/fundamental/"},{"name":"graph","slug":"graph","permalink":"http://example.com/tags/graph/"},{"name":"dp","slug":"dp","permalink":"http://example.com/tags/dp/"},{"name":"tree","slug":"tree","permalink":"http://example.com/tags/tree/"},{"name":"BST","slug":"BST","permalink":"http://example.com/tags/BST/"},{"name":"leetcode","slug":"leetcode","permalink":"http://example.com/tags/leetcode/"},{"name":"medium","slug":"medium","permalink":"http://example.com/tags/medium/"},{"name":"iterative","slug":"iterative","permalink":"http://example.com/tags/iterative/"},{"name":"binary tree","slug":"binary-tree","permalink":"http://example.com/tags/binary-tree/"},{"name":"traversal","slug":"traversal","permalink":"http://example.com/tags/traversal/"},{"name":"stack","slug":"stack","permalink":"http://example.com/tags/stack/"},{"name":"ruby","slug":"ruby","permalink":"http://example.com/tags/ruby/"},{"name":"new","slug":"new","permalink":"http://example.com/tags/new/"}]}